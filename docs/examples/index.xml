<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Examples on Datapio</title><link>https://datapio.github.io/docs/examples/</link><description>Recent content in Examples on Datapio</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 03 Dec 2019 21:43:35 +0100</lastBuildDate><atom:link href="https://datapio.github.io/docs/examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Simple Application</title><link>https://datapio.github.io/docs/examples/simple-app/</link><pubDate>Wed, 04 Dec 2019 11:29:49 +0100</pubDate><guid>https://datapio.github.io/docs/examples/simple-app/</guid><description/></item><item><title>Simple Micro-Service</title><link>https://datapio.github.io/docs/examples/simple-microservice/</link><pubDate>Wed, 04 Dec 2019 11:30:01 +0100</pubDate><guid>https://datapio.github.io/docs/examples/simple-microservice/</guid><description>Business code module.exports = { initialize: async () =&amp;gt; { const state = {} // ... return state }, terminate: async (state) =&amp;gt; { // ... }, resolvers: async (state) =&amp;gt; ({ Query: { books: async (parent, args, context, info) =&amp;gt; { return await context.prisma.books(info) } }, Mutation: { addBook: async (parent, { author, title }, context, info) =&amp;gt; { return await context.prisma.createBook({ author, title }, info) } } }), directives: async (state) =&amp;gt; ({ authenticated: async (next, source, args, context) =&amp;gt; { // .</description></item><item><title>Simple Engine</title><link>https://datapio.github.io/docs/examples/simple-engine/</link><pubDate>Wed, 04 Dec 2019 11:30:05 +0100</pubDate><guid>https://datapio.github.io/docs/examples/simple-engine/</guid><description>Business code module.exports = { initialize: async () =&amp;gt; { const state = {} // ... return state }, terminate: async (state) =&amp;gt; { // ... }, handle_message: async (state, message) =&amp;gt; { const result = {} // ... return result } } Kubernetes Resource --- apiVersion: datap.io/v1 kind: Engine metadata: name: simple-engine spec: package: simple-engine listen: - datapio.incomming emit: datapio.engines.simple</description></item></channel></rss>