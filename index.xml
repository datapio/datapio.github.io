<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Datapio</title><link>https://datapio.github.io/</link><description>Recent content on Datapio</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 17 Dec 2019 22:54:11 +0100</lastBuildDate><atom:link href="https://datapio.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>MetaController</title><link>https://datapio.github.io/docs/opencore/base/metacontroller/</link><pubDate>Tue, 17 Dec 2019 22:52:18 +0100</pubDate><guid>https://datapio.github.io/docs/opencore/base/metacontroller/</guid><description>Introduction Homepage
Usage within Datapio provide cluster actual state to Datapio controllers and apply desired state returned by them</description></item><item><title>Architecture</title><link>https://datapio.github.io/docs/microservices/architecture/</link><pubDate>Fri, 13 Dec 2019 15:32:31 +0100</pubDate><guid>https://datapio.github.io/docs/microservices/architecture/</guid><description/></item><item><title>Architecture</title><link>https://datapio.github.io/docs/opencore/architecture/</link><pubDate>Fri, 13 Dec 2019 15:32:31 +0100</pubDate><guid>https://datapio.github.io/docs/opencore/architecture/</guid><description/></item><item><title>Architecture</title><link>https://datapio.github.io/docs/pipelines/architecture/</link><pubDate>Fri, 13 Dec 2019 15:32:31 +0100</pubDate><guid>https://datapio.github.io/docs/pipelines/architecture/</guid><description/></item><item><title>Getting Started</title><link>https://datapio.github.io/docs/getting-started/</link><pubDate>Fri, 29 Nov 2019 20:32:00 +0100</pubDate><guid>https://datapio.github.io/docs/getting-started/</guid><description>Introduction Datapio is a framework used to automate 80% of the generic use cases you may encounter in the life cycle of your project, and configure the remaining 20%. It abstracts common actions in a fully automated process, such as:
continuous integration and deployment of your business code automated generation of the infrastructure used to run your business code multi-environment support based on your preferred Git flow To cover the most use cases, Datapio is divided in 3 features: OpenCore, MicroService and Pipelines.</description></item><item><title>Consul</title><link>https://datapio.github.io/docs/opencore/base/consul/</link><pubDate>Tue, 17 Dec 2019 22:39:39 +0100</pubDate><guid>https://datapio.github.io/docs/opencore/base/consul/</guid><description>Introduction Homepage
Usage within Datapio storage backend for Vault DNS for projects</description></item><item><title>Datapio YAML file reference</title><link>https://datapio.github.io/docs/opencore/datapio-yml/</link><pubDate>Mon, 16 Dec 2019 15:59:00 +0100</pubDate><guid>https://datapio.github.io/docs/opencore/datapio-yml/</guid><description>DatapioFile Note: Must be called datapio.yml and located at the root of the repository.
Field Type Description release string Release name to group the artifacts environments map string to Environment Project&#39;s environment definitions by environment&#39;s name artifacts Artifact array Artifacts definition Environment Seen in:
DatapioFile Field Type Description branch string Source branch for environment&#39;s deployments Artifact Seen in:</description></item><item><title>Simple Application</title><link>https://datapio.github.io/docs/examples/simple-app/</link><pubDate>Wed, 04 Dec 2019 11:29:49 +0100</pubDate><guid>https://datapio.github.io/docs/examples/simple-app/</guid><description>datapio.yml --- environments: production: branch: master preproduction: branch: dev artifacts: - name: simple-app type: docker path: sources/simple-app params: dockerfile: docker/Dockerfile build-args: BASE_IMAGE: nginx:alpine - name: simple-app type: helm path: charts/simple-app requires: - name: simple-app type: docker params: set: some_const: &amp;quot;this is a constant&amp;quot; some_option: ${{ config.SOME_OPTION }} # injected from Consul some_secret: ${{ secrets.SOME_SECRET }} # injected from Vault</description></item><item><title>Custom Resource Definitions</title><link>https://datapio.github.io/docs/microservices/crd/</link><pubDate>Wed, 04 Dec 2019 11:18:11 +0100</pubDate><guid>https://datapio.github.io/docs/microservices/crd/</guid><description>MicroService Group Version Kind datap.io v1 MicroService Field Type Description apiVersion string Schema version kind string Resource type metadata ObjectMeta Resource metadata spec MicroServiceSpec Resource specification status MicroServiceStatus Resource status MicroServiceSpec Seen in:
MicroService Field Type Description package string Name of NPM package containing the business code storage string Database storage size datamodel string Prisma Datamodel apiSchema string GraphQL schema params map Mapping of keys to values (may be injected from Consul or Vault), will be injected into business code MicroServiceStatus Seen in:</description></item><item><title>Custom Resource Definitions</title><link>https://datapio.github.io/docs/pipelines/crd/</link><pubDate>Wed, 04 Dec 2019 11:18:11 +0100</pubDate><guid>https://datapio.github.io/docs/pipelines/crd/</guid><description>RabbitCluster Group Version Kind datap.io v1 RabbitCluster Field Type Description apiVersion string Schema version kind string Resource type metadata ObjectMeta Resource metadata spec RabbitClusterSpec Resource specification status RabbitClusterStatus Resource status RabbitClusterSpec Seen in:
RabbitCluster Field Type Description nodes RabbitClusterNode array Cluster composition secret string Name of [Secret]() containing RabbitMQ credentials RabbitClusterNode Seen in:</description></item><item><title>Things are getting real</title><link>https://datapio.github.io/blog/things-are-getting-real/</link><pubDate>Fri, 29 Nov 2019 21:43:19 +0100</pubDate><guid>https://datapio.github.io/blog/things-are-getting-real/</guid><description>Hello there! After spending many months in our heads, Datapio finally came out into existence.
Though it is in very early stage, the team is assembling and development has started!
We sincerely hope to bring you a minimal viable product in the next few months.
In the mean time, watch closely what&#39;s happening on our Github and feel free to contribute.</description></item><item><title>Vault</title><link>https://datapio.github.io/docs/opencore/base/vault/</link><pubDate>Tue, 17 Dec 2019 22:44:33 +0100</pubDate><guid>https://datapio.github.io/docs/opencore/base/vault/</guid><description>Introduction Homepage
Usage within Datapio secret storage for projects uses Consul as storage backend Kubernetes authentication method enabled for secret injections into pods and TektonCD pipelines PKI secret engine enabled for automated certificate generation with Cert Manager</description></item><item><title>Simple Micro-Service</title><link>https://datapio.github.io/docs/examples/simple-microservice/</link><pubDate>Wed, 04 Dec 2019 11:30:01 +0100</pubDate><guid>https://datapio.github.io/docs/examples/simple-microservice/</guid><description>Business code module.exports = { initialize: async () =&amp;gt; { const state = {} // ... return state }, terminate: async (state) =&amp;gt; { // ... }, resolvers: async (state) =&amp;gt; ({ Query: { books: async (parent, args, context, info) =&amp;gt; { return await context.prisma.books(info) } }, Mutation: { addBook: async (parent, { author, title }, context, info) =&amp;gt; { return await context.prisma.createBook({ author, title }, info) } } }), directives: async (state) =&amp;gt; ({ authenticated: async (next, source, args, context) =&amp;gt; { // .</description></item><item><title>System components</title><link>https://datapio.github.io/docs/microservices/system/</link><pubDate>Wed, 04 Dec 2019 11:18:15 +0100</pubDate><guid>https://datapio.github.io/docs/microservices/system/</guid><description>MicroService Controller Database Controller Prisma Controller API Controller</description></item><item><title>System components</title><link>https://datapio.github.io/docs/pipelines/system/</link><pubDate>Wed, 04 Dec 2019 11:18:15 +0100</pubDate><guid>https://datapio.github.io/docs/pipelines/system/</guid><description>RabbitMQ Controller Engine Controller</description></item><item><title>Custom Resource Definitions</title><link>https://datapio.github.io/docs/opencore/crd/</link><pubDate>Wed, 04 Dec 2019 11:18:11 +0100</pubDate><guid>https://datapio.github.io/docs/opencore/crd/</guid><description>Project Group Version Kind datap.io v1 Project Field Type Description apiVersion string Schema version kind string Resource type metadata ObjectMeta Resource metadata spec ProjectSpec Resource specification status ProjectStatus Resource status ProjectSpec Seen in:
Project Field Type Description serviceAccountName string Name of [ServiceAccount]() owning this project features ProjectFeature array Features of Datapio for this project ProjectFeature Seen in:</description></item><item><title>Cert Manager</title><link>https://datapio.github.io/docs/opencore/base/cert-manager/</link><pubDate>Tue, 17 Dec 2019 22:47:41 +0100</pubDate><guid>https://datapio.github.io/docs/opencore/base/cert-manager/</guid><description>Introduction Homepage
Usage within Datapio provider of X.509 certificates for Ingress resources uses the PKI secret engine from Vault as certificate issuer</description></item><item><title>Simple Engine</title><link>https://datapio.github.io/docs/examples/simple-engine/</link><pubDate>Wed, 04 Dec 2019 11:30:05 +0100</pubDate><guid>https://datapio.github.io/docs/examples/simple-engine/</guid><description>Business code module.exports = { initialize: async () =&amp;gt; { const state = {} // ... return state }, terminate: async (state) =&amp;gt; { // ... }, handle_message: async (state, message) =&amp;gt; { const result = {} // ... return result } } Kubernetes Resource --- apiVersion: datap.io/v1 kind: Engine metadata: name: simple-engine spec: package: simple-engine listen: - datapio.incomming emit: datapio.engines.simple</description></item><item><title>Framework components</title><link>https://datapio.github.io/docs/microservices/framework/</link><pubDate>Wed, 04 Dec 2019 11:18:15 +0100</pubDate><guid>https://datapio.github.io/docs/microservices/framework/</guid><description>Datamodel synchronizing task API builder task</description></item><item><title>Framework components</title><link>https://datapio.github.io/docs/pipelines/framework/</link><pubDate>Wed, 04 Dec 2019 11:18:15 +0100</pubDate><guid>https://datapio.github.io/docs/pipelines/framework/</guid><description>Engine builder task</description></item><item><title>TektonCD</title><link>https://datapio.github.io/docs/opencore/base/tekton/</link><pubDate>Tue, 17 Dec 2019 22:47:35 +0100</pubDate><guid>https://datapio.github.io/docs/opencore/base/tekton/</guid><description>Introduction Homepage
Usage within Datapio declare and execute pipelines with Tekton Pipelines trigger pipelines execution with Github events with Tekton Triggers</description></item><item><title>System Components</title><link>https://datapio.github.io/docs/opencore/system/</link><pubDate>Tue, 03 Dec 2019 21:35:56 +0100</pubDate><guid>https://datapio.github.io/docs/opencore/system/</guid><description>User Admission Webhook Project Controller Project Admission Webhook Secret Injector Release Controller</description></item><item><title>Nexus</title><link>https://datapio.github.io/docs/opencore/base/nexus/</link><pubDate>Tue, 17 Dec 2019 22:54:11 +0100</pubDate><guid>https://datapio.github.io/docs/opencore/base/nexus/</guid><description>Introduction Homepage
Usage within Datapio storage for artifacts produced/consumed by pipelines</description></item><item><title>Framework components</title><link>https://datapio.github.io/docs/opencore/framework/</link><pubDate>Tue, 03 Dec 2019 21:35:59 +0100</pubDate><guid>https://datapio.github.io/docs/opencore/framework/</guid><description>Project Github Webhook Artifact building tasks</description></item></channel></rss>